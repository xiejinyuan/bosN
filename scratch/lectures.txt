Possible lectures:

  - Haskell basics1 (possibly review for some students) (dm)

  - Haskell basics2 (dm/bos)

  - Laziness (applications and pitfalls) (bos)

  - Monads and parsers, continuation-passing style (bos)

  - Various tricks for debugging and performance tuning (bos)

  - Testing/Quickcheck (bos)

  - The Iteratee/Enumerator paradigm. (dm)

  - How to use FFI, hsc, build ByteStrings in various contexts, and
    generally think about memory.  Possibly also coupled with discussion
    of the Haskel networking API.  (dm)

  - Software Transactional Memory, Parallel Haskell (bos)

  - Concurrency and how to build all kinds of abstractions with MVars.
    Event-based vs thread-based concurrency (dm)

  - Library-level optimization, RULES pragmas, stream fusion (bos)

  - All the gnarly things you can do with functional dependencies and/or
    type families, as well as other relevant extensions such as
    GADTs. (dm)

  - A lecture on how Haskell is implemented, to give students some idea
    of what is actually going on. (bos, or David Terei?)

  - SYB and fun with Data.Data methods gfoldl, gunfoldl. (dm)

  - Web-related topics?  formlets, plus maybe some cool Continuation
    type tricks if there's a paper on that.  Haskell database
    interfaces and interesting things you can do with types,
    HList/HaskellDB. (dm)

  - Arrows and maybe functional-reactive programming (guest lecture by
    Conal Elliott)

  - Language-level Information flow control (dm)

  - Case studies of real systems in Haskell (guest lecture by Don
    Stewart)?

  - Guest lecture from Oleg (delimited continuations, or Hlist)?

  - Generalizing zippers (Guest lecture from Dan Piponi)

Possible labs:

  - Erlang/OTP type stuff, hierarchy of control, letting threads die

  - JIT
